{
  "name" : "swrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__2433, const global float* restrict v__2434, const global float* restrict v__2435, const global float* restrict v__2436, float v__2437, float v__2438, global float* v__2451, global float* v__2445, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__2441; \n  float v__2446; \n  /* Private Memory */\n  float v__2443_0;\n  \n  for (int v_wg_id_2429 = get_group_id(0); v_wg_id_2429 < v_MHeight_2; v_wg_id_2429 = (v_wg_id_2429 + get_num_groups(0))) {\n    for (int v_l_id_2430 = get_local_id(0); v_l_id_2430 < v_MWidthC_1; v_l_id_2430 = (v_l_id_2430 + get_local_size(0))) {\n      float v_tmp_2489 = 0.0f; \n      v__2441 = v_tmp_2489; \n      int v_index_2490 = v__2433[(v_l_id_2430 + (v_MWidthC_1 * v_wg_id_2429))]; \n      if (v_index_2490 < 0) {\n        v__2443_0 = v__2441; \n      } else {\n        if (v_index_2490 >= v_VLength_3) {\n          v__2443_0 = v__2441; \n        } else {\n          v__2443_0 = v__2435[v_index_2490]; \n        }\n      }\n      v__2445[(-1 + v_MWidthC_1 + (-1 * v_l_id_2430) + (v_MWidthC_1 * v_wg_id_2429))] = mult(v__2443_0, v__2434[(v_l_id_2430 + (v_MWidthC_1 * v_wg_id_2429))]); \n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_2491 = 0.0f; \n    v__2446 = v_tmp_2491; \n    /* reduce_seq */\n    for (int v_i_2431 = 0; v_i_2431 < v_MWidthC_1; v_i_2431 = (1 + v_i_2431)) {\n      v__2446 = add(v__2446, v__2445[(v_i_2431 + (v_MWidthC_1 * v_wg_id_2429))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_2432 = 0; \n      v__2451[v_wg_id_2429] = doubleMultiplyAdd(v__2446, v__2437, v__2436[v_wg_id_2429], v__2438); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__2433",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2434",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__2435",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__2436",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__2437",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__2438",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__2445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__2451",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}