{
  "name" : "glb-sdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__11149, const global float* restrict v__11150, const global float* restrict v__11151, const global float* restrict v__11152, float v__11153, float v__11154, global float* v__11167, global float* v__11161, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11157; \n  float v__11162; \n  /* Private Memory */\n  float v__11159_0;\n  \n  for (int v_gl_id_11145 = get_global_id(0); v_gl_id_11145 < v_MHeight_2; v_gl_id_11145 = (v_gl_id_11145 + get_global_size(0))) {\n    /* map_seq */\n    for (int v_i_11146 = 0; v_i_11146 < v_MWidthC_1; v_i_11146 = (1 + v_i_11146)) {\n      float v_tmp_11199 = 0.0f; \n      v__11157 = v_tmp_11199; \n      int v_index_11201 = v__11149[(v_i_11146 + (v_MWidthC_1 * v_gl_id_11145))]; \n      if (v_index_11201 < 0) {\n        v__11159_0 = v__11157; \n      } else {\n        if (v_index_11201 >= v_VLength_3) {\n          v__11159_0 = v__11157; \n        } else {\n          v__11159_0 = v__11151[v_index_11201]; \n        }\n      }\n      v__11161[(-1 + v_MWidthC_1 + (-1 * v_i_11146) + (v_MWidthC_1 * v_gl_id_11145))] = mult(v__11159_0, v__11150[(v_i_11146 + (v_MWidthC_1 * v_gl_id_11145))]); \n    }\n    /* end map_seq */\n    float v_tmp_11202 = 0.0f; \n    v__11162 = v_tmp_11202; \n    /* reduce_seq */\n    for (int v_i_11147 = 0; v_i_11147 < v_MWidthC_1; v_i_11147 = (1 + v_i_11147)) {\n      v__11162 = add(v__11162, v__11161[(v_i_11147 + (v_MWidthC_1 * v_gl_id_11145))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_11148 = 0; \n      v__11167[v_gl_id_11145] = doubleMultiplyAdd(v__11162, v__11153, v__11152[v_gl_id_11145], v__11154); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__11149",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11150",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__11151",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__11152",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11153",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11154",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11161",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__11167",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}