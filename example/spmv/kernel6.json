{
  "name" : "glb-sdp-rsa",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__11604, const global float* restrict v__11605, const global float* restrict v__11606, const global float* restrict v__11607, float v__11608, float v__11609, global float* v__11623, global float* v__11622, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__11611; \n  float v__11614; \n  /* Private Memory */\n  float v__11616; \n  float v__11618; \n  for (int v_gl_id_11600 = get_global_id(0); v_gl_id_11600 < v_MHeight_2; v_gl_id_11600 = (v_gl_id_11600 + get_global_size(0))) {\n    float v_tmp_11648 = 0.0f; \n    v__11611 = v_tmp_11648; \n    /* reduce_seq */\n    int v_stop_11649 = min(v__11604[(1 + (v__11604[v_gl_id_11600] / 4))], ((global int*)(v__11605 + (((global int*)(v__11605))[v_gl_id_11600] / 4)))[1]); \n    for (int v_i_11601 = 0; v_i_11601 < v_stop_11649; v_i_11601 = (1 + v_i_11601)) {\n      float v_tmp_11657 = 0.0f; \n      v__11614 = v_tmp_11657; \n      int v_index_11659 = v__11604[(2 + v_i_11601 + (v__11604[v_gl_id_11600] / 4))]; \n      if (v_index_11659 < 0) {\n        v__11616 = v__11614; \n      } else {\n        if (v_index_11659 >= v_MWidthC_1) {\n          v__11616 = v__11614; \n        } else {\n          v__11616 = v__11606[v_index_11659]; \n        }\n      }\n      v__11618 = mult(v__11605[(2 + v_i_11601 + (((global int*)(v__11605))[v_gl_id_11600] / 4))], v__11616); \n      v__11611 = add(v__11611, v__11618); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_11602 = 0; \n      v__11622[v_gl_id_11600] = doubleMultiplyAdd(v__11611, v__11608, v__11607[v_gl_id_11600], v__11609); \n    }\n    /* end map_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_11603 = 0; \n      v__11623[v_gl_id_11600] = id(v__11622[v_gl_id_11600]); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "sglb",
    "arrayType" : "ragged"
  },
  "inputArgs" : [ {
    "variable" : "v__11604",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__11605",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__11606",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__11607",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__11608",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__11609",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__11622",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  } ],
  "outputArg" : {
    "variable" : "v__11623",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}