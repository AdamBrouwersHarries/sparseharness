{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__18391, const global float* restrict v__18392, const global float* restrict v__18393, const global float* restrict v__18394, float v__18395, float v__18396, global float* v__18416, global int* v__18398, local float* v__18411, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__18400; \n  float v__18402; \n  float v__14691; \n  /* Private Memory */\n  float v__18404_0;\n  \n  float v__18406_0;\n  \n  int v__18410_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_429 = v__18398; \n    local int v_w_id_18384; \n    if (get_local_id(0) == 0) {\n      v_w_id_18384 = atomic_inc(v_work_idx_429); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_18384 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_427; \n        v_work_idx_427 = 0; \n        int v_l_id_18385 = atomic_inc(&(v_work_idx_427)); \n        while((v_l_id_18385 < v_MWidthC_1)){\n          float v_tmp_18470 = 0.0f; \n          v__18400 = v_tmp_18470; \n          /* reduce_while_seq */\n          for (int v_i_18386 = 0; v_i_18386 < 8; v_i_18386 = (1 + v_i_18386)) {\n            v__18410_0 = check(v__18400, v__18391[(v_l_id_18385 + (8 * v_MWidthC_1 * v_w_id_18384) + (v_MWidthC_1 * v_i_18386))]); \n            if (v__18410_0) {\n            } else {\n              break;\n            }\n            float v_tmp_18471 = 0.0f; \n            v__18402 = v_tmp_18471; \n            int v_index_18472 = v__18391[(v_l_id_18385 + (8 * v_MWidthC_1 * v_w_id_18384) + (v_MWidthC_1 * v_i_18386))]; \n            if (v_index_18472 < 0) {\n              v__18404_0 = v__18402; \n            } else {\n              if (v_index_18472 >= v_VLength_3) {\n                v__18404_0 = v__18402; \n              } else {\n                v__18404_0 = v__18393[v_index_18472]; \n              }\n            }\n            v__18406_0 = mult(v__18404_0, v__18392[(v_l_id_18385 + (8 * v_MWidthC_1 * v_w_id_18384) + (v_MWidthC_1 * v_i_18386))]); \n            v__18400 = add(v__18406_0, v__18400); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18387 = 0; \n            v__18411[v_l_id_18385] = id(v__18400); \n          }\n          /* end map_seq */\n          v_l_id_18385 = atomic_inc(&(v_work_idx_427)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_422; \n        v_work_idx_422 = 0; \n        int v_l_id_18388 = atomic_inc(&(v_work_idx_422)); \n        while((v_l_id_18388 < 1)){\n          float v_tmp_18475 = 0.0f; \n          v__14691 = v_tmp_18475; \n          /* reduce_seq */\n          for (int v_i_18389 = 0; v_i_18389 < v_MWidthC_1; v_i_18389 = (1 + v_i_18389)) {\n            v__14691 = add(v__14691, v__18411[(v_i_18389 + (v_MWidthC_1 * v_l_id_18388))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_18390 = 0; \n            v__18416[v_w_id_18384] = doubleMultiplyAdd(v__14691, v__18395, v__18394[v_w_id_18384], v__18396); \n          }\n          /* end map_seq */\n          v_l_id_18388 = atomic_inc(&(v_work_idx_422)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_18384 = atomic_inc(v_work_idx_429); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__18391",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18392",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__18393",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__18394",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__18395",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__18396",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__18398",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__18416",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__18411",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}