{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nkernel void KERNEL(const global int* restrict v__12682, const global float* restrict v__12683, const global float* restrict v__12684, const global float* restrict v__12685, float v__12686, float v__12687, global float* v__12707, global int* v__12689, local float* v__12702, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__12691; \n  float v__12693; \n  float v__9384; \n  /* Private Memory */\n  float v__12695_0;\n  \n  float v__12697_0;\n  \n  int v__12701_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_357 = v__12689; \n    local int v_w_id_12675; \n    if (get_local_id(0) == 0) {\n      v_w_id_12675 = atomic_inc(v_work_idx_357); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_12675 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_355; \n        v_work_idx_355 = 0; \n        int v_l_id_12676 = atomic_inc(&(v_work_idx_355)); \n        while((v_l_id_12676 < v_MWidthC_1)){\n          float v_tmp_12761 = 0.0f; \n          v__12691 = v_tmp_12761; \n          /* reduce_while_seq */\n          for (int v_i_12677 = 0; v_i_12677 < 8; v_i_12677 = (1 + v_i_12677)) {\n            v__12701_0 = check(v__12691, v__12682[(v_l_id_12676 + (8 * v_MWidthC_1 * v_w_id_12675) + (v_MWidthC_1 * v_i_12677))]); \n            if (v__12701_0) {\n            } else {\n              break;\n            }\n            float v_tmp_12762 = 0.0f; \n            v__12693 = v_tmp_12762; \n            int v_index_12763 = v__12682[(v_l_id_12676 + (8 * v_MWidthC_1 * v_w_id_12675) + (v_MWidthC_1 * v_i_12677))]; \n            if (v_index_12763 < 0) {\n              v__12695_0 = v__12693; \n            } else {\n              if (v_index_12763 >= v_VLength_3) {\n                v__12695_0 = v__12693; \n              } else {\n                v__12695_0 = v__12684[v_index_12763]; \n              }\n            }\n            v__12697_0 = mult(v__12695_0, v__12683[(v_l_id_12676 + (8 * v_MWidthC_1 * v_w_id_12675) + (v_MWidthC_1 * v_i_12677))]); \n            v__12691 = add(v__12697_0, v__12691); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12678 = 0; \n            v__12702[v_l_id_12676] = id(v__12691); \n          }\n          /* end map_seq */\n          v_l_id_12676 = atomic_inc(&(v_work_idx_355)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_350; \n        v_work_idx_350 = 0; \n        int v_l_id_12679 = atomic_inc(&(v_work_idx_350)); \n        while((v_l_id_12679 < 1)){\n          float v_tmp_12766 = 0.0f; \n          v__9384 = v_tmp_12766; \n          /* reduce_seq */\n          for (int v_i_12680 = 0; v_i_12680 < v_MWidthC_1; v_i_12680 = (1 + v_i_12680)) {\n            v__9384 = add(v__9384, v__12702[(v_i_12680 + (v_MWidthC_1 * v_l_id_12679))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_12681 = 0; \n            v__12707[v_w_id_12675] = doubleMultiplyAdd(v__9384, v__12686, v__12685[v_w_id_12675], v__12687); \n          }\n          /* end map_seq */\n          v_l_id_12679 = atomic_inc(&(v_work_idx_350)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_12675 = atomic_inc(v_work_idx_357); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__12682",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12683",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__12684",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__12685",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__12686",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__12687",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__12689",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__12707",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__12702",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}