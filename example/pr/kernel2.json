{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__104207, const global float* restrict v__104208, const global float* restrict v__104209, const global float* restrict v__104210, float v__104211, float v__104212, global float* v__104232, global int* v__104214, local float* v__104227, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104216; \n  float v__104218; \n  float v__80917; \n  /* Private Memory */\n  float v__104220_0;\n  \n  float v__104222_0;\n  \n  int v__104226_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8910 = v__104214; \n    local int v_w_id_104200; \n    if (get_local_id(0) == 0) {\n      v_w_id_104200 = atomic_inc(v_work_idx_8910); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104200 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8908; \n        v_work_idx_8908 = 0; \n        int v_l_id_104201 = atomic_inc(&(v_work_idx_8908)); \n        while((v_l_id_104201 < v_MWidthC_1)){\n          float v_tmp_104286 = 0.0f; \n          v__104216 = v_tmp_104286; \n          /* reduce_while_seq */\n          for (int v_i_104202 = 0; v_i_104202 < 512; v_i_104202 = (1 + v_i_104202)) {\n            v__104226_0 = check(v__104216, v__104207[(v_l_id_104201 + (512 * v_MWidthC_1 * v_w_id_104200) + (v_MWidthC_1 * v_i_104202))]); \n            if (v__104226_0) {\n            } else {\n              break;\n            }\n            float v_tmp_104287 = 0.0f; \n            v__104218 = v_tmp_104287; \n            int v_index_104288 = v__104207[(v_l_id_104201 + (512 * v_MWidthC_1 * v_w_id_104200) + (v_MWidthC_1 * v_i_104202))]; \n            if (v_index_104288 < 0) {\n              v__104220_0 = v__104218; \n            } else {\n              if (v_index_104288 >= v_VLength_3) {\n                v__104220_0 = v__104218; \n              } else {\n                v__104220_0 = v__104209[v_index_104288]; \n              }\n            }\n            v__104222_0 = mult(v__104220_0, v__104208[(v_l_id_104201 + (512 * v_MWidthC_1 * v_w_id_104200) + (v_MWidthC_1 * v_i_104202))]); \n            v__104216 = add(v__104222_0, v__104216); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104203 = 0; \n            v__104227[v_l_id_104201] = id(v__104216); \n          }\n          /* end map_seq */\n          v_l_id_104201 = atomic_inc(&(v_work_idx_8908)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8903; \n        v_work_idx_8903 = 0; \n        int v_l_id_104204 = atomic_inc(&(v_work_idx_8903)); \n        while((v_l_id_104204 < 1)){\n          float v_tmp_104291 = 0.0f; \n          v__80917 = v_tmp_104291; \n          /* reduce_seq */\n          for (int v_i_104205 = 0; v_i_104205 < v_MWidthC_1; v_i_104205 = (1 + v_i_104205)) {\n            v__80917 = add(v__80917, v__104227[(v_i_104205 + (v_MWidthC_1 * v_l_id_104204))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104206 = 0; \n            v__104232[v_w_id_104200] = doubleMultiplyAdd(v__80917, v__104211, v__104210[v_w_id_104200], v__104212); \n          }\n          /* end map_seq */\n          v_l_id_104204 = atomic_inc(&(v_work_idx_8903)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104200 = atomic_inc(v_work_idx_8910); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__104207",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104208",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104209",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104210",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104211",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104212",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104214",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104232",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104227",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}