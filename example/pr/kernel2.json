{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat mult(float l, float r){\n  { return l * r; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__106442, const global float* restrict v__106443, const global float* restrict v__106444, const global float* restrict v__106445, float v__106446, float v__106447, global float* v__106467, global int* v__106449, local float* v__106462, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__106451; \n  float v__106453; \n  float v__83464; \n  /* Private Memory */\n  float v__106455_0;\n  \n  float v__106457_0;\n  \n  int v__106461_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8910 = v__106449; \n    local int v_w_id_106435; \n    if (get_local_id(0) == 0) {\n      v_w_id_106435 = atomic_inc(v_work_idx_8910); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_106435 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8908; \n        v_work_idx_8908 = 0; \n        int v_l_id_106436 = atomic_inc(&(v_work_idx_8908)); \n        while((v_l_id_106436 < v_MWidthC_1)){\n          float v_tmp_106521 = 0.0f; \n          v__106451 = v_tmp_106521; \n          /* reduce_while_seq */\n          for (int v_i_106437 = 0; v_i_106437 < 512; v_i_106437 = (1 + v_i_106437)) {\n            v__106461_0 = check(v__106451, v__106442[(v_l_id_106436 + (512 * v_MWidthC_1 * v_w_id_106435) + (v_MWidthC_1 * v_i_106437))]); \n            if (v__106461_0) {\n            } else {\n              break;\n            }\n            float v_tmp_106522 = 0.0f; \n            v__106453 = v_tmp_106522; \n            int v_index_106523 = v__106442[(v_l_id_106436 + (512 * v_MWidthC_1 * v_w_id_106435) + (v_MWidthC_1 * v_i_106437))]; \n            if (v_index_106523 < 0) {\n              v__106455_0 = v__106453; \n            } else {\n              if (v_index_106523 >= v_VLength_3) {\n                v__106455_0 = v__106453; \n              } else {\n                v__106455_0 = v__106444[v_index_106523]; \n              }\n            }\n            v__106457_0 = mult(v__106455_0, v__106443[(v_l_id_106436 + (512 * v_MWidthC_1 * v_w_id_106435) + (v_MWidthC_1 * v_i_106437))]); \n            v__106451 = add(v__106457_0, v__106451); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_106438 = 0; \n            v__106462[v_l_id_106436] = id(v__106451); \n          }\n          /* end map_seq */\n          v_l_id_106436 = atomic_inc(&(v_work_idx_8908)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8903; \n        v_work_idx_8903 = 0; \n        int v_l_id_106439 = atomic_inc(&(v_work_idx_8903)); \n        while((v_l_id_106439 < 1)){\n          float v_tmp_106526 = 0.0f; \n          v__83464 = v_tmp_106526; \n          /* reduce_seq */\n          for (int v_i_106440 = 0; v_i_106440 < v_MWidthC_1; v_i_106440 = (1 + v_i_106440)) {\n            v__83464 = add(v__83464, v__106462[(v_i_106440 + (v_MWidthC_1 * v_l_id_106439))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_106441 = 0; \n            v__106467[v_w_id_106435] = doubleMultiplyAdd(v__83464, v__106446, v__106445[v_w_id_106435], v__106447); \n          }\n          /* end map_seq */\n          v_l_id_106439 = atomic_inc(&(v_work_idx_8903)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_106435 = atomic_inc(v_work_idx_8910); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__106442",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106443",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__106444",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__106445",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__106446",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__106447",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__106449",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__106467",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__106462",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}