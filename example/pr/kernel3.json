{
  "name" : "swrg-slcl-sdp-chunk-128",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__96542, const global float* restrict v__96543, const global float* restrict v__96544, const global float* restrict v__96545, float v__96546, float v__96547, global float* v__96560, global float* v__96554, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__96550; \n  float v__96555; \n  /* Private Memory */\n  float v__96552_0;\n  \n  for (int v_wg_id_96537 = get_group_id(0); v_wg_id_96537 < ((v_MHeight_2)/(128)); v_wg_id_96537 = (v_wg_id_96537 + get_num_groups(0))) {\n    for (int v_l_id_96538 = get_local_id(0); v_l_id_96538 < 128; v_l_id_96538 = (v_l_id_96538 + get_local_size(0))) {\n      /* map_seq */\n      for (int v_i_96539 = 0; v_i_96539 < v_MWidthC_1; v_i_96539 = (1 + v_i_96539)) {\n        float v_tmp_96604 = 0.0f; \n        v__96550 = v_tmp_96604; \n        int v_index_96605 = v__96542[(v_i_96539 + (128 * v_MWidthC_1 * v_wg_id_96537) + (v_MWidthC_1 * v_l_id_96538))]; \n        if (v_index_96605 < 0) {\n          v__96552_0 = v__96550; \n        } else {\n          if (v_index_96605 >= v_VLength_3) {\n            v__96552_0 = v__96550; \n          } else {\n            v__96552_0 = v__96544[v_index_96605]; \n          }\n        }\n        v__96554[(-1 + v_MWidthC_1 + (128 * v_MWidthC_1 * v_wg_id_96537) + (-1 * v_i_96539) + (v_MWidthC_1 * v_l_id_96538))] = mult(v__96552_0, v__96543[(v_i_96539 + (128 * v_MWidthC_1 * v_wg_id_96537) + (v_MWidthC_1 * v_l_id_96538))]); \n      }\n      /* end map_seq */\n      float v_tmp_96606 = 0.0f; \n      v__96555 = v_tmp_96606; \n      /* reduce_seq */\n      for (int v_i_96540 = 0; v_i_96540 < v_MWidthC_1; v_i_96540 = (1 + v_i_96540)) {\n        v__96555 = add(v__96555, v__96554[(v_i_96540 + (128 * v_MWidthC_1 * v_wg_id_96537) + (v_MWidthC_1 * v_l_id_96538))]); \n      }\n      /* end reduce_seq */\n      /* map_seq */\n      /* iteration count is exactly 1, no loop emitted */\n      {\n        int v_i_96541 = 0; \n        v__96560[(v_l_id_96538 + (128 * v_wg_id_96537))] = doubleMultiplyAdd(v__96555, v__96546, v__96545[(v_l_id_96538 + (128 * v_wg_id_96537))], v__96547); \n      }\n      /* end map_seq */\n    }\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "chunkSize" : "128",
    "dotProduct" : "seq"
  },
  "inputArgs" : [ {
    "variable" : "v__96542",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96543",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__96544",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__96545",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__96546",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__96547",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__96554",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__96560",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}