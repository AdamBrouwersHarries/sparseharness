{
  "name" : "swrg-slcl-pmdp",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat mult(float l, float r){\n  { return l * r; }\n}\nfloat add(float x, float y){\n  { return x+y; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  {return (dpRes*alpha)+(rowIdxPair2*beta);}\n}\nkernel void KERNEL(const global int* restrict v__105137, const global float* restrict v__105138, const global float* restrict v__105139, const global float* restrict v__105140, float v__105141, float v__105142, global float* v__105155, global float* v__105149, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__105145; \n  float v__105150; \n  /* Private Memory */\n  float v__105147_0;\n  \n  for (int v_wg_id_105133 = get_group_id(0); v_wg_id_105133 < v_MHeight_2; v_wg_id_105133 = (v_wg_id_105133 + get_num_groups(0))) {\n    for (int v_l_id_105134 = get_local_id(0); v_l_id_105134 < v_MWidthC_1; v_l_id_105134 = (v_l_id_105134 + get_local_size(0))) {\n      float v_tmp_105195 = 0.0f; \n      v__105145 = v_tmp_105195; \n      int v_index_105196 = v__105137[(v_l_id_105134 + (v_MWidthC_1 * v_wg_id_105133))]; \n      if (v_index_105196 < 0) {\n        v__105147_0 = v__105145; \n      } else {\n        if (v_index_105196 >= v_VLength_3) {\n          v__105147_0 = v__105145; \n        } else {\n          v__105147_0 = v__105139[v_index_105196]; \n        }\n      }\n      v__105149[(-1 + v_MWidthC_1 + (-1 * v_l_id_105134) + (v_MWidthC_1 * v_wg_id_105133))] = mult(v__105147_0, v__105138[(v_l_id_105134 + (v_MWidthC_1 * v_wg_id_105133))]); \n    }\n    barrier(CLK_GLOBAL_MEM_FENCE);\n    \n    float v_tmp_105197 = 0.0f; \n    v__105150 = v_tmp_105197; \n    /* reduce_seq */\n    for (int v_i_105135 = 0; v_i_105135 < v_MWidthC_1; v_i_105135 = (1 + v_i_105135)) {\n      v__105150 = add(v__105150, v__105149[(v_i_105135 + (v_MWidthC_1 * v_wg_id_105133))]); \n    }\n    /* end reduce_seq */\n    /* map_seq */\n    /* iteration count is exactly 1, no loop emitted */\n    {\n      int v_i_105136 = 0; \n      v__105155[v_wg_id_105133] = doubleMultiplyAdd(v__105150, v__105141, v__105140[v_wg_id_105133], v__105142); \n    }\n    /* end map_seq */\n  }\n}}\n\n",
  "properties" : {
    "outerMap" : "swrg",
    "innerMap" : "slcl",
    "dotProduct" : "parallel"
  },
  "inputArgs" : [ {
    "variable" : "v__105137",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105138",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__105139",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__105140",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__105141",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__105142",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__105149",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2*v_MWidthC_1)"
  } ],
  "outputArg" : {
    "variable" : "v__105155",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}