{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint doubleMinMax(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n //int min1 = (dpRes < alpha) ? dpRes : alpha;\n //int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n int min1 = min(dpRes, alpha);\n int min2 = min(rowIdxPair2, beta);\n int result = max(min1, min2);\n\n //printf(\"Input: dpres: %d, alpha: %d, yvecelem: %d, beta: %d, min1: %d, min2: %d, result: %d\\n\", dpRes, alpha, rowIdxPair2, beta, min1, min2, result);\n\n return result;\n}\n    \n}\nint int_min(int a, int b){\n  \n{\n int result = min(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint int_max(int a, int b){\n  \n{\n int result = max(a, b);\n //printf(\"Input: %d, %d, result: %d\\n\", a, b, result);\n return result;\n }\n \n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__110293, const global int* restrict v__110294, const global int* restrict v__110295, const global int* restrict v__110296, int v__110297, int v__110298, global int* v__110318, global int* v__110300, local int* v__110313, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__110302; \n  int v__110304; \n  int v__107307; \n  /* Private Memory */\n  int v__110306_0;\n  \n  int v__110308_0;\n  \n  int v__110312_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_9265 = v__110300; \n    local int v_w_id_110286; \n    if (get_local_id(0) == 0) {\n      v_w_id_110286 = atomic_inc(v_work_idx_9265); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_110286 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_9263; \n        v_work_idx_9263 = 0; \n        int v_l_id_110287 = atomic_inc(&(v_work_idx_9263)); \n        while((v_l_id_110287 < v_MWidthC_1)){\n          int v_tmp_110372 = -2147483648; \n          v__110302 = v_tmp_110372; \n          /* reduce_while_seq */\n          for (int v_i_110288 = 0; v_i_110288 < 8; v_i_110288 = (1 + v_i_110288)) {\n            v__110312_0 = check(v__110302, v__110293[(v_l_id_110287 + (8 * v_MWidthC_1 * v_w_id_110286) + (v_MWidthC_1 * v_i_110288))]); \n            if (v__110312_0) {\n            } else {\n              break;\n            }\n            int v_tmp_110373 = -2147483648; \n            v__110304 = v_tmp_110373; \n            int v_index_110374 = v__110293[(v_l_id_110287 + (8 * v_MWidthC_1 * v_w_id_110286) + (v_MWidthC_1 * v_i_110288))]; \n            if (v_index_110374 < 0) {\n              v__110306_0 = v__110304; \n            } else {\n              if (v_index_110374 >= v_VLength_3) {\n                v__110306_0 = v__110304; \n              } else {\n                v__110306_0 = v__110295[v_index_110374]; \n              }\n            }\n            v__110308_0 = int_min(v__110306_0, v__110294[(v_l_id_110287 + (8 * v_MWidthC_1 * v_w_id_110286) + (v_MWidthC_1 * v_i_110288))]); \n            v__110302 = int_max(v__110308_0, v__110302); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_110289 = 0; \n            v__110313[v_l_id_110287] = id(v__110302); \n          }\n          /* end map_seq */\n          v_l_id_110287 = atomic_inc(&(v_work_idx_9263)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_9258; \n        v_work_idx_9258 = 0; \n        int v_l_id_110290 = atomic_inc(&(v_work_idx_9258)); \n        while((v_l_id_110290 < 1)){\n          int v_tmp_110377 = -2147483648; \n          v__107307 = v_tmp_110377; \n          /* reduce_seq */\n          for (int v_i_110291 = 0; v_i_110291 < v_MWidthC_1; v_i_110291 = (1 + v_i_110291)) {\n            v__107307 = int_max(v__107307, v__110313[(v_i_110291 + (v_MWidthC_1 * v_l_id_110290))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_110292 = 0; \n            v__110318[v_w_id_110286] = doubleMinMax(v__107307, v__110297, v__110296[v_w_id_110286], v__110298); \n          }\n          /* end map_seq */\n          v_l_id_110290 = atomic_inc(&(v_work_idx_9258)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_110286 = atomic_inc(v_work_idx_9265); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__110293",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110294",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__110295",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__110296",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__110297",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__110298",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__110300",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__110318",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__110313",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}