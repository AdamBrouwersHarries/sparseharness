{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint int_min(int a, int b){\n  { return a < b ? a: b;  }\n}\nint int_max(int a, int b){\n  { return a> b ? a : b; }\n}\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int min1 = (dpRes < alpha) ? dpRes : alpha;\n int min2 = (rowIdxPair2 < beta) ? rowIdxPair2 : beta;\n\n return (min1 > min2) ? min1 : min2;\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__130285, const global int* restrict v__130286, const global int* restrict v__130287, const global int* restrict v__130288, int v__130289, int v__130290, global int* v__130310, global int* v__130292, local int* v__130305, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__130294; \n  int v__130296; \n  int v__107307; \n  /* Private Memory */\n  int v__130298_0;\n  \n  int v__130300_0;\n  \n  int v__130304_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_11137 = v__130292; \n    local int v_w_id_130278; \n    if (get_local_id(0) == 0) {\n      v_w_id_130278 = atomic_inc(v_work_idx_11137); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_130278 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_11135; \n        v_work_idx_11135 = 0; \n        int v_l_id_130279 = atomic_inc(&(v_work_idx_11135)); \n        while((v_l_id_130279 < v_MWidthC_1)){\n          int v_tmp_130364 = -2147483648; \n          v__130294 = v_tmp_130364; \n          /* reduce_while_seq */\n          for (int v_i_130280 = 0; v_i_130280 < 512; v_i_130280 = (1 + v_i_130280)) {\n            v__130304_0 = check(v__130294, v__130285[(v_l_id_130279 + (512 * v_MWidthC_1 * v_w_id_130278) + (v_MWidthC_1 * v_i_130280))]); \n            if (v__130304_0) {\n            } else {\n              break;\n            }\n            int v_tmp_130365 = -2147483648; \n            v__130296 = v_tmp_130365; \n            int v_index_130366 = v__130285[(v_l_id_130279 + (512 * v_MWidthC_1 * v_w_id_130278) + (v_MWidthC_1 * v_i_130280))]; \n            if (v_index_130366 < 0) {\n              v__130298_0 = v__130296; \n            } else {\n              if (v_index_130366 >= v_VLength_3) {\n                v__130298_0 = v__130296; \n              } else {\n                v__130298_0 = v__130287[v_index_130366]; \n              }\n            }\n            v__130300_0 = int_max(v__130298_0, v__130286[(v_l_id_130279 + (512 * v_MWidthC_1 * v_w_id_130278) + (v_MWidthC_1 * v_i_130280))]); \n            v__130294 = int_min(v__130300_0, v__130294); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130281 = 0; \n            v__130305[v_l_id_130279] = id(v__130294); \n          }\n          /* end map_seq */\n          v_l_id_130279 = atomic_inc(&(v_work_idx_11135)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_11130; \n        v_work_idx_11130 = 0; \n        int v_l_id_130282 = atomic_inc(&(v_work_idx_11130)); \n        while((v_l_id_130282 < 1)){\n          int v_tmp_130369 = -2147483648; \n          v__107307 = v_tmp_130369; \n          /* reduce_seq */\n          for (int v_i_130283 = 0; v_i_130283 < v_MWidthC_1; v_i_130283 = (1 + v_i_130283)) {\n            v__107307 = int_min(v__107307, v__130305[(v_i_130283 + (v_MWidthC_1 * v_l_id_130282))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_130284 = 0; \n            v__130310[v_w_id_130278] = doubleAndOr(v__107307, v__130289, v__130288[v_w_id_130278], v__130290); \n          }\n          /* end map_seq */\n          v_l_id_130282 = atomic_inc(&(v_work_idx_11130)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_130278 = atomic_inc(v_work_idx_11137); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__130285",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130286",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__130287",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__130288",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__130289",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__130290",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__130292",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__130310",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__130305",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}