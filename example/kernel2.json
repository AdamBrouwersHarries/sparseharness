{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__44143, const global float* restrict v__44144, const global float* restrict v__44145, const global float* restrict v__44146, float v__44147, float v__44148, global float* v__44168, global int* v__44150, local float* v__44163, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__44152; \n  float v__44154; \n  float v__14691; \n  /* Private Memory */\n  float v__44156_0;\n  \n  float v__44158_0;\n  \n  int v__44162_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2733 = v__44150; \n    local int v_w_id_44136; \n    if (get_local_id(0) == 0) {\n      v_w_id_44136 = atomic_inc(v_work_idx_2733); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_44136 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2731; \n        v_work_idx_2731 = 0; \n        int v_l_id_44137 = atomic_inc(&(v_work_idx_2731)); \n        while((v_l_id_44137 < v_MWidthC_1)){\n          float v_tmp_44222 = 0.0f; \n          v__44152 = v_tmp_44222; \n          /* reduce_while_seq */\n          for (int v_i_44138 = 0; v_i_44138 < 512; v_i_44138 = (1 + v_i_44138)) {\n            v__44162_0 = check(v__44152, v__44143[(v_l_id_44137 + (512 * v_MWidthC_1 * v_w_id_44136) + (v_MWidthC_1 * v_i_44138))]); \n            if (v__44162_0) {\n            } else {\n              break;\n            }\n            float v_tmp_44223 = 0.0f; \n            v__44154 = v_tmp_44223; \n            int v_index_44224 = v__44143[(v_l_id_44137 + (512 * v_MWidthC_1 * v_w_id_44136) + (v_MWidthC_1 * v_i_44138))]; \n            if (v_index_44224 < 0) {\n              v__44156_0 = v__44154; \n            } else {\n              if (v_index_44224 >= v_VLength_3) {\n                v__44156_0 = v__44154; \n              } else {\n                v__44156_0 = v__44145[v_index_44224]; \n              }\n            }\n            v__44158_0 = mult(v__44156_0, v__44144[(v_l_id_44137 + (512 * v_MWidthC_1 * v_w_id_44136) + (v_MWidthC_1 * v_i_44138))]); \n            v__44152 = add(v__44158_0, v__44152); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_44139 = 0; \n            v__44163[v_l_id_44137] = id(v__44152); \n          }\n          /* end map_seq */\n          v_l_id_44137 = atomic_inc(&(v_work_idx_2731)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2726; \n        v_work_idx_2726 = 0; \n        int v_l_id_44140 = atomic_inc(&(v_work_idx_2726)); \n        while((v_l_id_44140 < 1)){\n          float v_tmp_44227 = 0.0f; \n          v__14691 = v_tmp_44227; \n          /* reduce_seq */\n          for (int v_i_44141 = 0; v_i_44141 < v_MWidthC_1; v_i_44141 = (1 + v_i_44141)) {\n            v__14691 = add(v__14691, v__44163[(v_i_44141 + (v_MWidthC_1 * v_l_id_44140))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_44142 = 0; \n            v__44168[v_w_id_44136] = doubleMultiplyAdd(v__14691, v__44147, v__44146[v_w_id_44136], v__44148); \n          }\n          /* end map_seq */\n          v_l_id_44140 = atomic_inc(&(v_work_idx_2726)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_44136 = atomic_inc(v_work_idx_2733); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__44143",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44144",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__44145",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__44146",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__44147",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__44148",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__44150",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__44168",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__44163",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}