{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_int_DEFINED\n#define Tuple2_int_int_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  int _1;\n} Tuple2_int_int;\n#endif\n\nint check(int acc, int v){\n  { return (v == -1); }\n}\nint bool_and(int a, int b){\n  { if((a != 0) && (b != 0 )){ return 1; }else{ return 0; } }\n}\nint bool_or(int a, int b){\n  { if((a != 0) || (b != 0 )){ return 1; }else{ return 0; } }\n}\nint id(int x){\n  { return x; }\n}\nint doubleAndOr(int dpRes, int alpha, int rowIdxPair2, int beta){\n  \n{\n int OrRes1;\n if((dpRes != 0) && (alpha !=0)) {\n   OrRes1 = 1;\n } else {\n   OrRes1 = 0;\n }\n int OrRes2;\n if((rowIdxPair2 != 0) && (beta !=0)) {\n   OrRes2 = 1;\n } else {\n   OrRes2 = 0;\n }\n return (OrRes1 || OrRes2);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__36523, const global int* restrict v__36524, const global int* restrict v__36525, const global int* restrict v__36526, int v__36527, int v__36528, global int* v__36548, global int* v__36530, local int* v__36543, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  int v__36532; \n  int v__36534; \n  int v__33230; \n  /* Private Memory */\n  int v__36536_0;\n  \n  int v__36538_0;\n  \n  int v__36542_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_2584 = v__36530; \n    local int v_w_id_36516; \n    if (get_local_id(0) == 0) {\n      v_w_id_36516 = atomic_inc(v_work_idx_2584); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_36516 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_2582; \n        v_work_idx_2582 = 0; \n        int v_l_id_36517 = atomic_inc(&(v_work_idx_2582)); \n        while((v_l_id_36517 < v_MWidthC_1)){\n          int v_tmp_36602 = 0; \n          v__36532 = v_tmp_36602; \n          /* reduce_while_seq */\n          for (int v_i_36518 = 0; v_i_36518 < 8; v_i_36518 = (1 + v_i_36518)) {\n            v__36542_0 = check(v__36532, v__36523[(v_l_id_36517 + (8 * v_MWidthC_1 * v_w_id_36516) + (v_MWidthC_1 * v_i_36518))]); \n            if (v__36542_0) {\n            } else {\n              break;\n            }\n            int v_tmp_36603 = 0; \n            v__36534 = v_tmp_36603; \n            int v_index_36604 = v__36523[(v_l_id_36517 + (8 * v_MWidthC_1 * v_w_id_36516) + (v_MWidthC_1 * v_i_36518))]; \n            if (v_index_36604 < 0) {\n              v__36536_0 = v__36534; \n            } else {\n              if (v_index_36604 >= v_VLength_3) {\n                v__36536_0 = v__36534; \n              } else {\n                v__36536_0 = v__36525[v_index_36604]; \n              }\n            }\n            v__36538_0 = bool_and(v__36536_0, v__36524[(v_l_id_36517 + (8 * v_MWidthC_1 * v_w_id_36516) + (v_MWidthC_1 * v_i_36518))]); \n            v__36532 = bool_or(v__36538_0, v__36532); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_36519 = 0; \n            v__36543[v_l_id_36517] = id(v__36532); \n          }\n          /* end map_seq */\n          v_l_id_36517 = atomic_inc(&(v_work_idx_2582)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_2577; \n        v_work_idx_2577 = 0; \n        int v_l_id_36520 = atomic_inc(&(v_work_idx_2577)); \n        while((v_l_id_36520 < 1)){\n          int v_tmp_36607 = 0; \n          v__33230 = v_tmp_36607; \n          /* reduce_seq */\n          for (int v_i_36521 = 0; v_i_36521 < v_MWidthC_1; v_i_36521 = (1 + v_i_36521)) {\n            v__33230 = bool_or(v__33230, v__36543[(v_i_36521 + (v_MWidthC_1 * v_l_id_36520))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_36522 = 0; \n            v__36548[v_w_id_36516] = doubleAndOr(v__33230, v__36527, v__36526[v_w_id_36516], v__36528); \n          }\n          /* end map_seq */\n          v_l_id_36520 = atomic_inc(&(v_work_idx_2577)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_36516 = atomic_inc(v_work_idx_2584); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__36523",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36524",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__36525",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__36526",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__36527",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__36528",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__36530",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__36548",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__36543",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}