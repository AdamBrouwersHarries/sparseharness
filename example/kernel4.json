{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat add(float x, float y){\n  \n//printf(\"x: %f, y: %f\\n\", x, y);\nreturn x+y;\n    \n}\nfloat mult(float l, float r){\n  \n//printf(\"l (vect): %f, r (matrix): %f\\n\", l, r);\nreturn l*r;\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat id(float x){\n  { return x; }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n //printf(\"dpRes: %f, alpha: %f, rowIdxPair2: %f, beta: %f\\n\", dpRes,alpha,rowIdxPair2, beta);\n return (dpRes*alpha)+(rowIdxPair2*beta);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__5927, const global float* restrict v__5928, const global float* restrict v__5929, const global float* restrict v__5930, float v__5931, float v__5932, global float* v__5952, global int* v__5934, local float* v__5947, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__5936; \n  float v__5938; \n  float v__2941; \n  /* Private Memory */\n  float v__5940_0;\n  \n  float v__5942_0;\n  \n  int v__5946_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_353 = v__5934; \n    local int v_w_id_5920; \n    if (get_local_id(0) == 0) {\n      v_w_id_5920 = atomic_inc(v_work_idx_353); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_5920 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_351; \n        v_work_idx_351 = 0; \n        int v_l_id_5921 = atomic_inc(&(v_work_idx_351)); \n        while((v_l_id_5921 < v_MWidthC_1)){\n          float v_tmp_6006 = 0.0f; \n          v__5936 = v_tmp_6006; \n          /* reduce_while_seq */\n          for (int v_i_5922 = 0; v_i_5922 < 8; v_i_5922 = (1 + v_i_5922)) {\n            v__5946_0 = check(v__5936, v__5927[(v_l_id_5921 + (8 * v_MWidthC_1 * v_w_id_5920) + (v_MWidthC_1 * v_i_5922))]); \n            if (v__5946_0) {\n            } else {\n              break;\n            }\n            float v_tmp_6007 = 0.0f; \n            v__5938 = v_tmp_6007; \n            int v_index_6008 = v__5927[(v_l_id_5921 + (8 * v_MWidthC_1 * v_w_id_5920) + (v_MWidthC_1 * v_i_5922))]; \n            if (v_index_6008 < 0) {\n              v__5940_0 = v__5938; \n            } else {\n              if (v_index_6008 >= v_VLength_3) {\n                v__5940_0 = v__5938; \n              } else {\n                v__5940_0 = v__5929[v_index_6008]; \n              }\n            }\n            v__5942_0 = mult(v__5940_0, v__5928[(v_l_id_5921 + (8 * v_MWidthC_1 * v_w_id_5920) + (v_MWidthC_1 * v_i_5922))]); \n            v__5936 = add(v__5942_0, v__5936); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_5923 = 0; \n            v__5947[v_l_id_5921] = id(v__5936); \n          }\n          /* end map_seq */\n          v_l_id_5921 = atomic_inc(&(v_work_idx_351)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_346; \n        v_work_idx_346 = 0; \n        int v_l_id_5924 = atomic_inc(&(v_work_idx_346)); \n        while((v_l_id_5924 < 1)){\n          float v_tmp_6011 = 0.0f; \n          v__2941 = v_tmp_6011; \n          /* reduce_seq */\n          for (int v_i_5925 = 0; v_i_5925 < v_MWidthC_1; v_i_5925 = (1 + v_i_5925)) {\n            v__2941 = add(v__2941, v__5947[(v_i_5925 + (v_MWidthC_1 * v_l_id_5924))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_5926 = 0; \n            v__5952[v_w_id_5920] = doubleMultiplyAdd(v__2941, v__5931, v__5930[v_w_id_5920], v__5932); \n          }\n          /* end map_seq */\n          v_l_id_5924 = atomic_inc(&(v_work_idx_346)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_5920 = atomic_inc(v_work_idx_353); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__5927",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5928",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__5929",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__5930",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__5931",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__5932",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__5934",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__5952",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__5947",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}