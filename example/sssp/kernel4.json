{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__79102, const global float* restrict v__79103, const global float* restrict v__79104, const global float* restrict v__79105, float v__79106, float v__79107, global float* v__79127, global int* v__79109, local float* v__79122, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__79111; \n  float v__79113; \n  float v__75402; \n  /* Private Memory */\n  float v__79115_0;\n  \n  float v__79117_0;\n  \n  int v__79121_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5891 = v__79109; \n    local int v_w_id_79095; \n    if (get_local_id(0) == 0) {\n      v_w_id_79095 = atomic_inc(v_work_idx_5891); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_79095 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5889; \n        v_work_idx_5889 = 0; \n        int v_l_id_79096 = atomic_inc(&(v_work_idx_5889)); \n        while((v_l_id_79096 < v_MWidthC_1)){\n          float v_tmp_79181 = 3.4028235E38f; \n          v__79111 = v_tmp_79181; \n          /* reduce_while_seq */\n          for (int v_i_79097 = 0; v_i_79097 < 8; v_i_79097 = (1 + v_i_79097)) {\n            v__79121_0 = check(v__79111, v__79102[(v_l_id_79096 + (8 * v_MWidthC_1 * v_w_id_79095) + (v_MWidthC_1 * v_i_79097))]); \n            if (v__79121_0) {\n            } else {\n              break;\n            }\n            float v_tmp_79182 = 3.4028235E38f; \n            v__79113 = v_tmp_79182; \n            int v_index_79183 = v__79102[(v_l_id_79096 + (8 * v_MWidthC_1 * v_w_id_79095) + (v_MWidthC_1 * v_i_79097))]; \n            if (v_index_79183 < 0) {\n              v__79115_0 = v__79113; \n            } else {\n              if (v_index_79183 >= v_VLength_3) {\n                v__79115_0 = v__79113; \n              } else {\n                v__79115_0 = v__79104[v_index_79183]; \n              }\n            }\n            v__79117_0 = absadd(v__79115_0, v__79103[(v_l_id_79096 + (8 * v_MWidthC_1 * v_w_id_79095) + (v_MWidthC_1 * v_i_79097))]); \n            v__79111 = clmin(v__79117_0, v__79111); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79098 = 0; \n            v__79122[v_l_id_79096] = id(v__79111); \n          }\n          /* end map_seq */\n          v_l_id_79096 = atomic_inc(&(v_work_idx_5889)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_5884; \n        v_work_idx_5884 = 0; \n        int v_l_id_79099 = atomic_inc(&(v_work_idx_5884)); \n        while((v_l_id_79099 < 1)){\n          float v_tmp_79186 = 3.4028235E38f; \n          v__75402 = v_tmp_79186; \n          /* reduce_seq */\n          for (int v_i_79100 = 0; v_i_79100 < v_MWidthC_1; v_i_79100 = (1 + v_i_79100)) {\n            v__75402 = clmin(v__75402, v__79122[(v_i_79100 + (v_MWidthC_1 * v_l_id_79099))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_79101 = 0; \n            v__79127[v_w_id_79095] = doubleMultiplyAdd(v__75402, v__79106, v__79105[v_w_id_79095], v__79107); \n          }\n          /* end map_seq */\n          v_l_id_79099 = atomic_inc(&(v_work_idx_5884)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_79095 = atomic_inc(v_work_idx_5891); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__79102",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79103",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__79104",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__79105",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__79106",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__79107",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__79109",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__79127",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__79122",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}