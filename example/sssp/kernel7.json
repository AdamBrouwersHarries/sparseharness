{
  "name" : "awrg-alcl-fdp-chunk-rsa-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat id(float x){\n  { return x; }\n}\nkernel void KERNEL(const global int* restrict v__78460, const global float* restrict v__78461, const global float* restrict v__78462, const global float* restrict v__78463, float v__78464, float v__78465, global float* v__78480, global float* v__78479, global int* v__78467, int v_MHeight_2, int v_MWidthC_1){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__78468; \n  float v__78471; \n  /* Private Memory */\n  float v__78473_0;\n  \n  float v__78475_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_5819 = v__78467; \n    local int v_w_id_78455; \n    if (get_local_id(0) == 0) {\n      v_w_id_78455 = atomic_inc(v_work_idx_5819); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_78455 < ((v_MHeight_2)/(8)))){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_5817; \n        v_work_idx_5817 = 0; \n        int v_l_id_78456 = atomic_inc(&(v_work_idx_5817)); \n        while((v_l_id_78456 < 8)){\n          float v_tmp_78512 = 3.4028235E38f; \n          v__78468 = v_tmp_78512; \n          /* reduce_seq */\n          int v_stop_78513 = min(v__78460[(1 + (v__78460[(v_l_id_78456 + (8 * v_w_id_78455))] / 4))], ((global int*)(v__78461 + (((global int*)(v__78461))[(v_l_id_78456 + (8 * v_w_id_78455))] / 4)))[1]); \n          for (int v_i_78457 = 0; v_i_78457 < v_stop_78513; v_i_78457 = (1 + v_i_78457)) {\n            float v_tmp_78521 = 3.4028235E38f; \n            v__78471 = v_tmp_78521; \n            int v_index_78523 = v__78460[(2 + v_i_78457 + (v__78460[(v_l_id_78456 + (8 * v_w_id_78455))] / 4))]; \n            if (v_index_78523 < 0) {\n              v__78473_0 = v__78471; \n            } else {\n              if (v_index_78523 >= v_MWidthC_1) {\n                v__78473_0 = v__78471; \n              } else {\n                v__78473_0 = v__78462[v_index_78523]; \n              }\n            }\n            v__78475_0 = absadd(v__78461[(2 + v_i_78457 + (((global int*)(v__78461))[(v_l_id_78456 + (8 * v_w_id_78455))] / 4))], v__78473_0); \n            v__78468 = clmin(v__78468, v__78475_0); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78458 = 0; \n            v__78479[(v_l_id_78456 + (8 * v_w_id_78455))] = doubleMultiplyAdd(v__78468, v__78464, v__78463[(v_l_id_78456 + (8 * v_w_id_78455))], v__78465); \n          }\n          /* end map_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_78459 = 0; \n            v__78480[(v_l_id_78456 + (8 * v_w_id_78455))] = id(v__78479[(v_l_id_78456 + (8 * v_w_id_78455))]); \n          }\n          /* end map_seq */\n          v_l_id_78456 = atomic_inc(&(v_work_idx_5817)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_78455 = atomic_inc(v_work_idx_5819); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "chunkSize" : "8",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "arrayType" : "ragged",
    "dotProduct" : "fused"
  },
  "inputArgs" : [ {
    "variable" : "v__78460",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__78461",
    "addressSpace" : "global",
    "size" : "?"
  }, {
    "variable" : "v__78462",
    "addressSpace" : "global",
    "size" : "(4*v_MWidthC_1)"
  }, {
    "variable" : "v__78463",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78464",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__78465",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__78479",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__78467",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__78480",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ ],
  "paramVars" : [ "MHeight", "MWidthC" ],
  "outputSize" : "(4*v_MHeight_2)"
}