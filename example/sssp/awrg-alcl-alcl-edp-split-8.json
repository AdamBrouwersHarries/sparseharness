{
  "name" : "awrg-alcl-alcl-edp-split-8",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__60172, const global float* restrict v__60173, const global float* restrict v__60174, const global float* restrict v__60175, float v__60176, float v__60177, global float* v__60197, global int* v__60179, local float* v__60192, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__60181; \n  float v__60183; \n  float v__57186; \n  /* Private Memory */\n  float v__60185_0;\n  \n  float v__60187_0;\n  \n  int v__60191_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_4799 = v__60179; \n    local int v_w_id_60165; \n    if (get_local_id(0) == 0) {\n      v_w_id_60165 = atomic_inc(v_work_idx_4799); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_60165 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_4797; \n        v_work_idx_4797 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_60166 = atomic_inc(&(v_work_idx_4797)); \n        while((v_l_id_60166 < v_MWidthC_1)){\n          float v_tmp_60251 = 3.4028235E38f; \n          v__60181 = v_tmp_60251; \n          /* reduce_while_seq */\n          for (int v_i_60167 = 0; v_i_60167 < 8; v_i_60167 = (1 + v_i_60167)) {\n            v__60191_0 = check(v__60181, v__60172[(v_l_id_60166 + (8 * v_MWidthC_1 * v_w_id_60165) + (v_MWidthC_1 * v_i_60167))]); \n            if (v__60191_0) {\n            } else {\n              break;\n            }\n            float v_tmp_60252 = 3.4028235E38f; \n            v__60183 = v_tmp_60252; \n            int v_index_60253 = v__60172[(v_l_id_60166 + (8 * v_MWidthC_1 * v_w_id_60165) + (v_MWidthC_1 * v_i_60167))]; \n            if (v_index_60253 < 0) {\n              v__60185_0 = v__60183; \n            } else {\n              if (v_index_60253 >= v_VLength_3) {\n                v__60185_0 = v__60183; \n              } else {\n                v__60185_0 = v__60174[v_index_60253]; \n              }\n            }\n            v__60187_0 = absadd(v__60185_0, v__60173[(v_l_id_60166 + (8 * v_MWidthC_1 * v_w_id_60165) + (v_MWidthC_1 * v_i_60167))]); \n            v__60181 = clmin(v__60187_0, v__60181); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60168 = 0; \n            v__60192[v_l_id_60166] = id(v__60181); \n          }\n          /* end map_seq */\n          v_l_id_60166 = atomic_inc(&(v_work_idx_4797)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_4792; \n        v_work_idx_4792 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_60169 = atomic_inc(&(v_work_idx_4792)); \n        while((v_l_id_60169 < 1)){\n          float v_tmp_60256 = 3.4028235E38f; \n          v__57186 = v_tmp_60256; \n          /* reduce_seq */\n          for (int v_i_60170 = 0; v_i_60170 < v_MWidthC_1; v_i_60170 = (1 + v_i_60170)) {\n            v__57186 = clmin(v__57186, v__60192[(v_i_60170 + (v_MWidthC_1 * v_l_id_60169))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_60171 = 0; \n            v__60197[v_w_id_60165] = doubleMultiplyAdd(v__57186, v__60176, v__60175[v_w_id_60165], v__60177); \n          }\n          /* end map_seq */\n          v_l_id_60169 = atomic_inc(&(v_work_idx_4792)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_60165 = atomic_inc(v_work_idx_4799); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "8",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__60172",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60173",
    "addressSpace" : "global",
    "size" : "(32*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__60174",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__60175",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__60176",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__60177",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__60179",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__60197",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__60192",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}