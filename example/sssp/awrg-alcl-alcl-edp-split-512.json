{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__80176, const global float* restrict v__80177, const global float* restrict v__80178, const global float* restrict v__80179, float v__80180, float v__80181, global float* v__80201, global int* v__80183, local float* v__80196, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80185; \n  float v__80187; \n  float v__57186; \n  /* Private Memory */\n  float v__80189_0;\n  \n  float v__80191_0;\n  \n  int v__80195_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6671 = v__80183; \n    local int v_w_id_80169; \n    if (get_local_id(0) == 0) {\n      v_w_id_80169 = atomic_inc(v_work_idx_6671); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80169 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6669; \n        v_work_idx_6669 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_80170 = atomic_inc(&(v_work_idx_6669)); \n        while((v_l_id_80170 < v_MWidthC_1)){\n          float v_tmp_80255 = 3.4028235E38f; \n          v__80185 = v_tmp_80255; \n          /* reduce_while_seq */\n          for (int v_i_80171 = 0; v_i_80171 < 512; v_i_80171 = (1 + v_i_80171)) {\n            v__80195_0 = check(v__80185, v__80176[(v_l_id_80170 + (512 * v_MWidthC_1 * v_w_id_80169) + (v_MWidthC_1 * v_i_80171))]); \n            if (v__80195_0) {\n            } else {\n              break;\n            }\n            float v_tmp_80256 = 3.4028235E38f; \n            v__80187 = v_tmp_80256; \n            int v_index_80257 = v__80176[(v_l_id_80170 + (512 * v_MWidthC_1 * v_w_id_80169) + (v_MWidthC_1 * v_i_80171))]; \n            if (v_index_80257 < 0) {\n              v__80189_0 = v__80187; \n            } else {\n              if (v_index_80257 >= v_VLength_3) {\n                v__80189_0 = v__80187; \n              } else {\n                v__80189_0 = v__80178[v_index_80257]; \n              }\n            }\n            v__80191_0 = absadd(v__80189_0, v__80177[(v_l_id_80170 + (512 * v_MWidthC_1 * v_w_id_80169) + (v_MWidthC_1 * v_i_80171))]); \n            v__80185 = clmin(v__80191_0, v__80185); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80172 = 0; \n            v__80196[v_l_id_80170] = id(v__80185); \n          }\n          /* end map_seq */\n          v_l_id_80170 = atomic_inc(&(v_work_idx_6669)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6664; \n        v_work_idx_6664 = 0; \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        int v_l_id_80173 = atomic_inc(&(v_work_idx_6664)); \n        while((v_l_id_80173 < 1)){\n          float v_tmp_80260 = 3.4028235E38f; \n          v__57186 = v_tmp_80260; \n          /* reduce_seq */\n          for (int v_i_80174 = 0; v_i_80174 < v_MWidthC_1; v_i_80174 = (1 + v_i_80174)) {\n            v__57186 = clmin(v__57186, v__80196[(v_i_80174 + (v_MWidthC_1 * v_l_id_80173))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80175 = 0; \n            v__80201[v_w_id_80169] = doubleMultiplyAdd(v__57186, v__80180, v__80179[v_w_id_80169], v__80181); \n          }\n          /* end map_seq */\n          v_l_id_80173 = atomic_inc(&(v_work_idx_6664)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80169 = atomic_inc(v_work_idx_6671); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80176",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80177",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80178",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80179",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80180",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80181",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80183",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80201",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80196",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MWidthC", "MHeight", "VLength" ]
}