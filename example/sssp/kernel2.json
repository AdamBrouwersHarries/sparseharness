{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nkernel void KERNEL(const global int* restrict v__104854, const global float* restrict v__104855, const global float* restrict v__104856, const global float* restrict v__104857, float v__104858, float v__104859, global float* v__104879, global int* v__104861, local float* v__104874, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__104863; \n  float v__104865; \n  float v__75402; \n  /* Private Memory */\n  float v__104867_0;\n  \n  float v__104869_0;\n  \n  int v__104873_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_8195 = v__104861; \n    local int v_w_id_104847; \n    if (get_local_id(0) == 0) {\n      v_w_id_104847 = atomic_inc(v_work_idx_8195); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_104847 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_8193; \n        v_work_idx_8193 = 0; \n        int v_l_id_104848 = atomic_inc(&(v_work_idx_8193)); \n        while((v_l_id_104848 < v_MWidthC_1)){\n          float v_tmp_104933 = 3.4028235E38f; \n          v__104863 = v_tmp_104933; \n          /* reduce_while_seq */\n          for (int v_i_104849 = 0; v_i_104849 < 512; v_i_104849 = (1 + v_i_104849)) {\n            v__104873_0 = check(v__104863, v__104854[(v_l_id_104848 + (512 * v_MWidthC_1 * v_w_id_104847) + (v_MWidthC_1 * v_i_104849))]); \n            if (v__104873_0) {\n            } else {\n              break;\n            }\n            float v_tmp_104934 = 3.4028235E38f; \n            v__104865 = v_tmp_104934; \n            int v_index_104935 = v__104854[(v_l_id_104848 + (512 * v_MWidthC_1 * v_w_id_104847) + (v_MWidthC_1 * v_i_104849))]; \n            if (v_index_104935 < 0) {\n              v__104867_0 = v__104865; \n            } else {\n              if (v_index_104935 >= v_VLength_3) {\n                v__104867_0 = v__104865; \n              } else {\n                v__104867_0 = v__104856[v_index_104935]; \n              }\n            }\n            v__104869_0 = absadd(v__104867_0, v__104855[(v_l_id_104848 + (512 * v_MWidthC_1 * v_w_id_104847) + (v_MWidthC_1 * v_i_104849))]); \n            v__104863 = clmin(v__104869_0, v__104863); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104850 = 0; \n            v__104874[v_l_id_104848] = id(v__104863); \n          }\n          /* end map_seq */\n          v_l_id_104848 = atomic_inc(&(v_work_idx_8193)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_8188; \n        v_work_idx_8188 = 0; \n        int v_l_id_104851 = atomic_inc(&(v_work_idx_8188)); \n        while((v_l_id_104851 < 1)){\n          float v_tmp_104938 = 3.4028235E38f; \n          v__75402 = v_tmp_104938; \n          /* reduce_seq */\n          for (int v_i_104852 = 0; v_i_104852 < v_MWidthC_1; v_i_104852 = (1 + v_i_104852)) {\n            v__75402 = clmin(v__75402, v__104874[(v_i_104852 + (v_MWidthC_1 * v_l_id_104851))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_104853 = 0; \n            v__104879[v_w_id_104847] = doubleMultiplyAdd(v__75402, v__104858, v__104857[v_w_id_104847], v__104859); \n          }\n          /* end map_seq */\n          v_l_id_104851 = atomic_inc(&(v_work_idx_8188)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_104847 = atomic_inc(v_work_idx_8195); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__104854",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104855",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__104856",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__104857",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__104858",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__104859",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__104861",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__104879",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__104874",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}