{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nkernel void KERNEL(const global int* restrict v__82594, const global float* restrict v__82595, const global float* restrict v__82596, const global float* restrict v__82597, float v__82598, float v__82599, global float* v__82619, global int* v__82601, local float* v__82614, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__82603; \n  float v__82605; \n  float v__59616; \n  /* Private Memory */\n  float v__82607_0;\n  \n  float v__82609_0;\n  \n  int v__82613_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6683 = v__82601; \n    local int v_w_id_82587; \n    if (get_local_id(0) == 0) {\n      v_w_id_82587 = atomic_inc(v_work_idx_6683); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_82587 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6681; \n        v_work_idx_6681 = 0; \n        int v_l_id_82588 = atomic_inc(&(v_work_idx_6681)); \n        while((v_l_id_82588 < v_MWidthC_1)){\n          float v_tmp_82673 = 3.4028235E38f; \n          v__82603 = v_tmp_82673; \n          /* reduce_while_seq */\n          for (int v_i_82589 = 0; v_i_82589 < 512; v_i_82589 = (1 + v_i_82589)) {\n            v__82613_0 = check(v__82603, v__82594[(v_l_id_82588 + (512 * v_MWidthC_1 * v_w_id_82587) + (v_MWidthC_1 * v_i_82589))]); \n            if (v__82613_0) {\n            } else {\n              break;\n            }\n            float v_tmp_82674 = 3.4028235E38f; \n            v__82605 = v_tmp_82674; \n            int v_index_82675 = v__82594[(v_l_id_82588 + (512 * v_MWidthC_1 * v_w_id_82587) + (v_MWidthC_1 * v_i_82589))]; \n            if (v_index_82675 < 0) {\n              v__82607_0 = v__82605; \n            } else {\n              if (v_index_82675 >= v_VLength_3) {\n                v__82607_0 = v__82605; \n              } else {\n                v__82607_0 = v__82596[v_index_82675]; \n              }\n            }\n            v__82609_0 = absadd(v__82607_0, v__82595[(v_l_id_82588 + (512 * v_MWidthC_1 * v_w_id_82587) + (v_MWidthC_1 * v_i_82589))]); \n            v__82603 = clmin(v__82609_0, v__82603); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82590 = 0; \n            v__82614[v_l_id_82588] = id(v__82603); \n          }\n          /* end map_seq */\n          v_l_id_82588 = atomic_inc(&(v_work_idx_6681)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6676; \n        v_work_idx_6676 = 0; \n        int v_l_id_82591 = atomic_inc(&(v_work_idx_6676)); \n        while((v_l_id_82591 < 1)){\n          float v_tmp_82678 = 3.4028235E38f; \n          v__59616 = v_tmp_82678; \n          /* reduce_seq */\n          for (int v_i_82592 = 0; v_i_82592 < v_MWidthC_1; v_i_82592 = (1 + v_i_82592)) {\n            v__59616 = clmin(v__59616, v__82614[(v_i_82592 + (v_MWidthC_1 * v_l_id_82591))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_82593 = 0; \n            v__82619[v_w_id_82587] = doubleMultiplyAdd(v__59616, v__82598, v__82597[v_w_id_82587], v__82599); \n          }\n          /* end map_seq */\n          v_l_id_82591 = atomic_inc(&(v_work_idx_6676)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_82587 = atomic_inc(v_work_idx_6683); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__82594",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82595",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__82596",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__82597",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__82598",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__82599",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__82601",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__82619",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__82614",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}