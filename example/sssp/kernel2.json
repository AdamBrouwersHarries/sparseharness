{
  "name" : "awrg-alcl-alcl-edp-split-512",
  "source" : "#ifndef Tuple2_int_float_DEFINED\n#define Tuple2_int_float_DEFINED\ntypedef struct __attribute__((aligned(4))) {\n  int _0;\n  float _1;\n} Tuple2_int_float;\n#endif\n\nfloat absadd(float a, float b){\n  { return fabs(a) + fabs(b); }\n}\nfloat doubleMultiplyAdd(float dpRes, float alpha, float rowIdxPair2, float beta){\n  \n{\n  float a = fabs(dpRes) + fabs(alpha);\n  float b = fabs(rowIdxPair2) + fabs(beta);\n  return fabs(a) < fabs(b) ? fabs(a) : fabs(b);\n}\n    \n}\nfloat clmin(float a, float b){\n  { return fabs(a) < fabs(b) ? fabs(a) : fabs(b); }\n}\nfloat id(float x){\n  { return x; }\n}\nint check(float acc, int v){\n  { return (v != -1);}\n}\nkernel void KERNEL(const global int* restrict v__80361, const global float* restrict v__80362, const global float* restrict v__80363, const global float* restrict v__80364, float v__80365, float v__80366, global float* v__80386, global int* v__80368, local float* v__80381, int v_MHeight_2, int v_MWidthC_1, int v_VLength_3){ \n#ifndef WORKGROUP_GUARD\n#define WORKGROUP_GUARD\n#endif\nWORKGROUP_GUARD\n{\n  /* Static local memory */\n  /* Typed Value memory */\n  float v__80370; \n  float v__80372; \n  float v__57071; \n  /* Private Memory */\n  float v__80374_0;\n  \n  float v__80376_0;\n  \n  int v__80380_0;\n  \n  /* atomic_workgroup_map */\n  {\n    global int* v_work_idx_6683 = v__80368; \n    local int v_w_id_80354; \n    if (get_local_id(0) == 0) {\n      v_w_id_80354 = atomic_inc(v_work_idx_6683); \n    }\n    barrier(CLK_LOCAL_MEM_FENCE);\n    \n    while((v_w_id_80354 < v_MHeight_2)){\n      /* atomic_local_map */\n      {\n        local int v_work_idx_6681; \n        v_work_idx_6681 = 0; \n        int v_l_id_80355 = atomic_inc(&(v_work_idx_6681)); \n        while((v_l_id_80355 < v_MWidthC_1)){\n          float v_tmp_80440 = 3.4028235E38f; \n          v__80370 = v_tmp_80440; \n          /* reduce_while_seq */\n          for (int v_i_80356 = 0; v_i_80356 < 512; v_i_80356 = (1 + v_i_80356)) {\n            v__80380_0 = check(v__80370, v__80361[(v_l_id_80355 + (512 * v_MWidthC_1 * v_w_id_80354) + (v_MWidthC_1 * v_i_80356))]); \n            if (v__80380_0) {\n            } else {\n              break;\n            }\n            float v_tmp_80441 = 3.4028235E38f; \n            v__80372 = v_tmp_80441; \n            int v_index_80442 = v__80361[(v_l_id_80355 + (512 * v_MWidthC_1 * v_w_id_80354) + (v_MWidthC_1 * v_i_80356))]; \n            if (v_index_80442 < 0) {\n              v__80374_0 = v__80372; \n            } else {\n              if (v_index_80442 >= v_VLength_3) {\n                v__80374_0 = v__80372; \n              } else {\n                v__80374_0 = v__80363[v_index_80442]; \n              }\n            }\n            v__80376_0 = absadd(v__80374_0, v__80362[(v_l_id_80355 + (512 * v_MWidthC_1 * v_w_id_80354) + (v_MWidthC_1 * v_i_80356))]); \n            v__80370 = clmin(v__80376_0, v__80370); \n          }\n          /* end reduce_while_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80357 = 0; \n            v__80381[v_l_id_80355] = id(v__80370); \n          }\n          /* end map_seq */\n          v_l_id_80355 = atomic_inc(&(v_work_idx_6681)); \n        }\n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n      /* atomic_local_map */\n      {\n        local int v_work_idx_6676; \n        v_work_idx_6676 = 0; \n        int v_l_id_80358 = atomic_inc(&(v_work_idx_6676)); \n        while((v_l_id_80358 < 1)){\n          float v_tmp_80445 = 3.4028235E38f; \n          v__57071 = v_tmp_80445; \n          /* reduce_seq */\n          for (int v_i_80359 = 0; v_i_80359 < v_MWidthC_1; v_i_80359 = (1 + v_i_80359)) {\n            v__57071 = clmin(v__57071, v__80381[(v_i_80359 + (v_MWidthC_1 * v_l_id_80358))]); \n          }\n          /* end reduce_seq */\n          /* map_seq */\n          /* iteration count is exactly 1, no loop emitted */\n          {\n            int v_i_80360 = 0; \n            v__80386[v_w_id_80354] = doubleMultiplyAdd(v__57071, v__80365, v__80364[v_w_id_80354], v__80366); \n          }\n          /* end map_seq */\n          v_l_id_80358 = atomic_inc(&(v_work_idx_6676)); \n        }\n      }\n      barrier(CLK_GLOBAL_MEM_FENCE);\n      \n      if (get_local_id(0) == 0) {\n        v_w_id_80354 = atomic_inc(v_work_idx_6683); \n      }\n      barrier(CLK_LOCAL_MEM_FENCE);\n      \n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  \n}}\n\n",
  "properties" : {
    "splitSize" : "512",
    "innerMap2" : "alcl",
    "innerMap" : "alcl",
    "outerMap" : "awrg",
    "dotProduct" : "earlyexit"
  },
  "inputArgs" : [ {
    "variable" : "v__80361",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80362",
    "addressSpace" : "global",
    "size" : "(2048*v_MHeight_2*v_MWidthC_1)"
  }, {
    "variable" : "v__80363",
    "addressSpace" : "global",
    "size" : "(4*v_VLength_3)"
  }, {
    "variable" : "v__80364",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  }, {
    "variable" : "v__80365",
    "addressSpace" : "private",
    "size" : "4"
  }, {
    "variable" : "v__80366",
    "addressSpace" : "private",
    "size" : "4"
  } ],
  "tempGlobals" : [ {
    "variable" : "v__80368",
    "addressSpace" : "global",
    "size" : "4"
  } ],
  "outputArg" : {
    "variable" : "v__80386",
    "addressSpace" : "global",
    "size" : "(4*v_MHeight_2)"
  },
  "tempLocals" : [ {
    "variable" : "v__80381",
    "addressSpace" : "local",
    "size" : "(4*v_MWidthC_1)"
  } ],
  "paramVars" : [ "MHeight", "MWidthC", "VLength" ],
  "outputSize" : "(4*v_MHeight_2)"
}